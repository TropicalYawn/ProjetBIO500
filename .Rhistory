vernacular_fr VARCHAR(100),
kingdom VARCHAR(100) NOT NULL,
phylum VARCHAR(100) NOT NULL,
class VARCHAR(100) NOT NULL,
\"order\" VARCHAR(100) NOT NULL,  -- Le mot 'order' est réservé en SQL, on l'entoure de guillemets.
family VARCHAR(100) NOT NULL,
genus VARCHAR(100) NOT NULL,
species VARCHAR(100)
);"
dbSendQuery(ma_bdd, creer_taxonomie)
# Créer la table des observations
creer_observations <- "
CREATE TABLE observations (
observed_scientific_name TEXT NOT NULL,
year_obs INTEGER,
day_obs INTEGER,
time_obs TEXT,
dwc_event_date TEXT,
obs_variable TEXT NOT NULL,
obs_unit TEXT,
obs_value REAL,
lat REAL,
lon REAL,
original_source TEXT,
creator TEXT,
title TEXT,
publisher TEXT,
intellectual_rights TEXT,
license TEXT,
owner TEXT,
FOREIGN KEY (observed_scientific_name) REFERENCES taxonomie(observed_scientific_name)
);"
dbSendQuery(ma_bdd, creer_observations)
# Créer la table de taxonomie
creer_taxonomie <- "
CREATE TABLE taxonomie (
observed_scientific_name TEXT PRIMARY KEY,
valid_scientific_name VARCHAR(100) NOT NULL,
rank VARCHAR(100) NOT NULL,
vernacular_fr VARCHAR(100),
kingdom VARCHAR(100) NOT NULL,
phylum VARCHAR(100) NOT NULL,
class VARCHAR(100) NOT NULL,
\"order\" VARCHAR(100) NOT NULL,  -- Le mot 'order' est réservé en SQL, on l'entoure de guillemets.
family VARCHAR(100) NOT NULL,
genus VARCHAR(100) NOT NULL,
species VARCHAR(100)
);"
dbSendQuery(ma_bdd, creer_taxonomie)
prnt(taxonomie)
print(taxonomie)
dbListTables(ma_bdd)
dbGetQuery(ma_bdd, "PRAGMA table_info(taxonomie);")
dbGetQuery(ma_bdd, "PRAGMA table_info(observations);")
dbGetQuery(ma_bdd, "
SELECT observations.observed_scientific_name, taxonomie.valid_scientific_name, obs_value
FROM observations
INNER JOIN taxonomie ON observations.observed_scientific_name = taxonomie.observed_scientific_name
LIMIT 10;
")
dbGetQuery(ma_bdd, "
SELECT observations.observed_scientific_name, taxonomie.observed_scientific_name
FROM observations
LEFT JOIN taxonomie ON observations.observed_scientific_name = taxonomie.observed_scientific_name
WHERE taxonomie.observed_scientific_name IS NULL;
")
dbGetQuery(ma_bdd, "
SELECT observations.observed_scientific_name
FROM observations
LEFT JOIN taxonomie ON observations.observed_scientific_name = taxonomie.observed_scientific_name
WHERE taxonomie.observed_scientific_name IS NULL;
")
dbGetQuery(ma_bdd, "
PRAGMA foreign_key_check;
")
# Liste des colonnes attendues (ajuste en fonction de tes besoins)
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")  # Remplace par les vrais noms de colonnes
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"  # Sous-dossier où se trouvent tes fichiers CSV
# Liste de tous les fichiers CSV dans le sous-dossier, sauf taxonomie.csv
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier
fichier_exclu <- "taxonomie.csv"
fichiers <- setdiff(fichiers, file.path(csv_directory, fichier_exclu))
# Initialiser une liste pour les fichiers incorrects
fichiers_incorrects <- list()
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Ajouter le fichier incorrect à la liste
fichiers_incorrects <- append(fichiers_incorrects, list(fichier))
}
}
# Afficher les fichiers incorrects
if (length(fichiers_incorrects) > 0) {
print("Fichiers avec des colonnes incorrectes :")
print(fichiers_incorrects)
} else {
print("Tous les fichiers ont les bonnes colonnes.")
}
#1. Combiner tous les fichiers csv d'observations en un data frame pour faire les tests
fichiers <- list.files(pattern = "\\.csv$") # Liste de tous les fichiers CSV dans le répertoire
csv_directory <- "lepidopteres"  # C'est le sous-dossier où se trouvent tes fichiers CSV
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
fichier_exclu <- file.path(csv_directory, "taxonomie.csv") #Exclure le fichier taxonomie.csv pour le premier data_frame et les premiers tests car les colonnes ne sont pas les mêmes, ferait redondance
fichiers_observations <- setdiff(fichiers, fichier_exclu)
fichiers_liste <- lapply(fichiers_observations, read.csv)  # Lire chaque fichier CSV dans une liste
df_observations <- do.call(rbind, fichiers_liste)  # Combiner tous les data frames en un seul
#Obtenir les fonctions du script des fonctions
source("Fonctions_verifications.R")
#2. Effectuer les tests pour le data frame des observations combinées
#Pour la colonne observed_scientific_name
verifier_nulle_NA_texte(df_observations$observed_scientific_name)
#Pour la colonne year_obs
remplacer_non_numeriques_par_NA(df_observations$year_obs)
#Pour la colonne day_obs
remplacer_non_numeriques_par_NA(df_observations$day_obs)
#Pour la colonne time_obs
verifier_format_horaire(df_observations$time_obs)
#Pour la colonne dwc_event_date
remplacer_cases_vides_par_NA(df_observations$dwc_event_date)
#Pour la colonne obs_variable
remplacer_cases_vides_par_NA(df_observations$obs_variable)
#Pour la colonne obs_unit
remplacer_cases_vides_par_NA((df_observations$obs_unit))
all(is.na(df_observations$obs_unit)) #Vérifier qu'il y a bel et bien seulement des NA dans cette colonne
df_observations <- df_observations[, !names(df_observations) %in% "obs_unit"] #Supprimer la colonne obs_unit
#Pour la colonne obs_value
remplacer_cases_vides_par_NA(df_observations$obs_value)
#Pour la colonne lat
remplacer_non_numeriques_par_NA(df_observations$lat)
#Pour la colonne lon
remplacer_non_numeriques_par_NA(df_observations$lon)
#Pour la colonne original_source
remplacer_cases_vides_par_NA(df_observations$original_source)
#Pour la colonne creator
remplacer_cases_vides_par_NA(df_observations$creator)
#Pour la colonne title
remplacer_cases_vides_par_NA(df_observations$title)
#Pour la colonne publisher
remplacer_cases_vides_par_NA(df_observations$publisher)
#Pour la colonne intellectual_rights
remplacer_cases_vides_par_NA(df_observations$intellectual_rights)
#Pour la colonne license
remplacer_cases_vides_par_NA(df_observations$license)
#Pour la colonne owner
remplacer_cases_vides_par_NA(df_observations$owner)
#3. Créer le data frame pour taxonomie et faire les tests des colonnes
df_taxonomie <- read.csv("lepidopteres/taxonomie.csv") #Lire le fichier
source("verification_pattern.R")
source("fonction_verification_numerique_NA.R")
source("fonction_verification_NA.R")
#Obtenir les fonctions des script des fonctions
source("Fonctions_verification_colonnes.R")
#Obtenir les fonctions des script des fonctions
source("fonction_verification_colonnes.R")
df_taxonomie <- read.csv("lepidopteres/taxonomie.csv") #Lire le fichier
verifier_nulle_NA_texte(df_taxonomie$observed_scientific_name) #Vérifier que la clé primaire a bel et bien une valeur non-nulle a chaque ligne et que c'est du texte
verifier_nulle_NA_texte(df_taxonomie$valid_scientific_name) #Vérifier que le nom scientifique valide n'est pas null ou pas du texte
verifier_nulle_NA_texte((df_taxonomie$rank)) #Vérifier que le rank n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$vernacular_fr) #Remplacer les cases vides de vernacular_fr par des NA
verifier_nulle_NA_texte((df_taxonomie$phylum)) #Vérifier que le phylum n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$class)) #Vérifier que la colonne class n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$order)) #Vérifier que la colonne order n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$family)) #Vérifier que la colonne family n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$genus)) #Vérifier que la colonne genus n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$species) #Remplacer les cases vides par des NA dans la colonne species
ma_bdd <- dbConnect(RSQLite::SQLite(), "base_observations.sqlite")
base_de_donnees <- dbConnect(RSQLite::SQLite(), "base_observations.sqlite")
rm(list = ls())  # Effacer tous les objets dans l'environnement global
gc()  # Nettoyer la mémoire
#Il y aura deux data frame, un pour les observations et un pour la taxonomie.
#Charger les librairies nécessaires
library(RSQLite)
# 1. Vérifier que toutes les colonnes ont les mêmes noms dans tous les fichiers d'observations, puis combiner tous les fichiers csv d'observations en un data frame pour faire les tests
# Liste des colonnes attendues
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier, car ce ne sont pas des observations
fichier_exclu <- file.path(csv_directory, "taxonomie.csv")
fichiers_observations <- setdiff(fichiers, fichier_exclu)
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers_observations) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Arrêter l'exécution et afficher un message
stop(paste("Le fichier", fichier, "a des colonnes incorrectes. Exécution arrêtée."))
}
}
#Il y aura deux data frame, un pour les observations et un pour la taxonomie.
#Charger les librairies nécessaires
library(RSQLite)
# 1. Vérifier que toutes les colonnes ont les mêmes noms dans tous les fichiers d'observations, puis combiner tous les fichiers csv d'observations en un data frame pour faire les tests
# Liste des colonnes attendues
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier, car ce ne sont pas des observations
fichier_exclu <- file.path(csv_directory, "taxonomie.csv")
fichiers_observations <- setdiff(fichiers, fichier_exclu)
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers_observations) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Arrêter l'exécution et afficher un message
stop(paste("Le fichier", fichier, "a des colonnes incorrectes. Exécution arrêtée."))
}
}
# Lire et combiner tous les fichiers CSV après avoir validé les colonnes
fichiers_liste <- lapply(fichiers_observations, read.csv)  # Lire chaque fichier CSV dans une liste
df_observations <- do.call(rbind, fichiers_liste)  # Combiner tous les data frames en un seul
#Obtenir les fonctions des script des fonctions
source("fonction_verification_colonnes.R")
source("verification_pattern.R")
source("fonction_verification_numerique_NA.R")
source("fonction_verification_NA.R")
#2. Effectuer les tests pour le data frame des observations combinées
#Pour la colonne observed_scientific_name
verifier_nulle_NA_texte(df_observations$observed_scientific_name)
#Pour la colonne year_obs
remplacer_non_numeriques_par_NA(df_observations$year_obs)
#Pour la colonne day_obs
remplacer_non_numeriques_par_NA(df_observations$day_obs)
#Pour la colonne time_obs
verifier_format_horaire(df_observations$time_obs)
#Pour la colonne dwc_event_date
remplacer_cases_vides_par_NA(df_observations$dwc_event_date)
#Pour la colonne obs_variable
remplacer_cases_vides_par_NA(df_observations$obs_variable)
#Pour la colonne obs_unit
remplacer_cases_vides_par_NA((df_observations$obs_unit))
if (all(is.na(df_observations$obs_unit))) {
#Vérifier qu'il y a bel et bien seulement des NA dans cette colonne
df_observations <- df_observations[, !names(df_observations) %in% "obs_unit"] #Supprimer la colonne obs_unit si toutes les valeurs sont NA
return(df_observations)
}
#Il y aura deux data frame, un pour les observations et un pour la taxonomie.
#Charger les librairies nécessaires
library(RSQLite)
# 1. Vérifier que toutes les colonnes ont les mêmes noms dans tous les fichiers d'observations, puis combiner tous les fichiers csv d'observations en un data frame pour faire les tests
# Liste des colonnes attendues
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier, car ce ne sont pas des observations
fichier_exclu <- file.path(csv_directory, "taxonomie.csv")
fichiers_observations <- setdiff(fichiers, fichier_exclu)
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers_observations) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Arrêter l'exécution et afficher un message
stop(paste("Le fichier", fichier, "a des colonnes incorrectes. Exécution arrêtée."))
}
}
# Lire et combiner tous les fichiers CSV après avoir validé les colonnes
fichiers_liste <- lapply(fichiers_observations, read.csv)  # Lire chaque fichier CSV dans une liste
df_observations <- do.call(rbind, fichiers_liste)  # Combiner tous les data frames en un seul
#Obtenir les fonctions des script des fonctions
source("fonction_verification_colonnes.R")
source("verification_pattern.R")
source("fonction_verification_numerique_NA.R")
source("fonction_verification_NA.R")
#2. Effectuer les tests pour le data frame des observations combinées
#Pour la colonne observed_scientific_name
verifier_nulle_NA_texte(df_observations$observed_scientific_name)
#Pour la colonne year_obs
remplacer_non_numeriques_par_NA(df_observations$year_obs)
#Pour la colonne day_obs
remplacer_non_numeriques_par_NA(df_observations$day_obs)
#Pour la colonne time_obs
verifier_format_horaire(df_observations$time_obs)
#Pour la colonne dwc_event_date
remplacer_cases_vides_par_NA(df_observations$dwc_event_date)
#Pour la colonne obs_variable
remplacer_cases_vides_par_NA(df_observations$obs_variable)
#Pour la colonne obs_unit
remplacer_cases_vides_par_NA((df_observations$obs_unit))
if (all(is.na(df_observations$obs_unit))) {
#Vérifier qu'il y a bel et bien seulement des NA dans cette colonne
df_observations <- df_observations[, !names(df_observations) %in% "obs_unit"] #Supprimer la colonne obs_unit si toutes les valeurs sont NA
}
#Pour la colonne obs_value
remplacer_cases_vides_par_NA(df_observations$obs_value)
#Pour la colonne lat
remplacer_non_numeriques_par_NA(df_observations$lat)
#Pour la colonne lon
remplacer_non_numeriques_par_NA(df_observations$lon)
#Pour la colonne original_source
remplacer_cases_vides_par_NA(df_observations$original_source)
#Pour la colonne creator
remplacer_cases_vides_par_NA(df_observations$creator)
#Pour la colonne title
remplacer_cases_vides_par_NA(df_observations$title)
#Pour la colonne publisher
remplacer_cases_vides_par_NA(df_observations$publisher)
#Pour la colonne intellectual_rights
remplacer_cases_vides_par_NA(df_observations$intellectual_rights)
#Pour la colonne license
remplacer_cases_vides_par_NA(df_observations$license)
#Pour la colonne owner
remplacer_cases_vides_par_NA(df_observations$owner)
#3. Créer le data frame pour taxonomie et faire les tests des colonnes
df_taxonomie <- read.csv("lepidopteres/taxonomie.csv") #Lire le fichier
verifier_nulle_NA_texte(df_taxonomie$observed_scientific_name) #Vérifier que la clé primaire a bel et bien une valeur non-nulle a chaque ligne et que c'est du texte
verifier_nulle_NA_texte(df_taxonomie$valid_scientific_name) #Vérifier que le nom scientifique valide n'est pas null ou pas du texte
verifier_nulle_NA_texte((df_taxonomie$rank)) #Vérifier que le rank n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$vernacular_fr) #Remplacer les cases vides de vernacular_fr par des NA
verifier_nulle_NA_texte((df_taxonomie$phylum)) #Vérifier que le phylum n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$class)) #Vérifier que la colonne class n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$order)) #Vérifier que la colonne order n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$family)) #Vérifier que la colonne family n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$genus)) #Vérifier que la colonne genus n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$species) #Remplacer les cases vides par des NA dans la colonne species
#4. Charger la base de donnée et les tables SQLite
base_de_donnees <- dbConnect(RSQLite::SQLite(), "base_observations.sqlite")
#Futures analyses ici
#Fermer la connexion après utilisation
dbDisconnect(base_de_donnees)
#Il y aura deux data frame, un pour les observations et un pour la taxonomie.
#Charger les librairies nécessaires
library(RSQLite)
# 1. Vérifier que toutes les colonnes ont les mêmes noms dans tous les fichiers d'observations, puis combiner tous les fichiers csv d'observations en un data frame pour faire les tests
# Liste des colonnes attendues
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier, car ce ne sont pas des observations
fichier_exclu <- file.path(csv_directory, "taxonomie.csv")
fichiers_observations <- setdiff(fichiers, fichier_exclu)
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers_observations) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Arrêter l'exécution et afficher un message
stop(paste("Le fichier", fichier, "a des colonnes incorrectes. Exécution arrêtée."))
}
}
# Lire et combiner tous les fichiers CSV après avoir validé les colonnes
fichiers_liste <- lapply(fichiers_observations, read.csv)  # Lire chaque fichier CSV dans une liste
df_observations <- do.call(rbind, fichiers_liste)  # Combiner tous les data frames en un seul
#Obtenir les fonctions des script des fonctions
source("fonction_verification_colonnes.R")
source("verification_pattern.R")
source("fonction_verification_numerique_NA.R")
source("fonction_verification_NA.R")
#2. Effectuer les tests pour le data frame des observations combinées
#Pour la colonne observed_scientific_name
verifier_nulle_NA_texte(df_observations$observed_scientific_name)
#Pour la colonne year_obs
remplacer_non_numeriques_par_NA(df_observations$year_obs)
#Pour la colonne day_obs
remplacer_non_numeriques_par_NA(df_observations$day_obs)
#Pour la colonne time_obs
verifier_format_horaire(df_observations$time_obs)
#Pour la colonne dwc_event_date
remplacer_cases_vides_par_NA(df_observations$dwc_event_date)
#Pour la colonne obs_variable
remplacer_cases_vides_par_NA(df_observations$obs_variable)
#Pour la colonne obs_unit
remplacer_cases_vides_par_NA((df_observations$obs_unit))
if (all(is.na(df_observations$obs_unit))) {
#Vérifier qu'il y a bel et bien seulement des NA dans cette colonne
df_observations <- df_observations[, !names(df_observations) %in% "obs_unit"] #Supprimer la colonne obs_unit si toutes les valeurs sont NA
}
#Pour la colonne obs_value
remplacer_cases_vides_par_NA(df_observations$obs_value)
#Pour la colonne lat
remplacer_non_numeriques_par_NA(df_observations$lat)
#Pour la colonne lon
remplacer_non_numeriques_par_NA(df_observations$lon)
#Pour la colonne original_source
remplacer_cases_vides_par_NA(df_observations$original_source)
#Pour la colonne creator
remplacer_cases_vides_par_NA(df_observations$creator)
#Pour la colonne title
remplacer_cases_vides_par_NA(df_observations$title)
#Pour la colonne publisher
remplacer_cases_vides_par_NA(df_observations$publisher)
#Pour la colonne intellectual_rights
remplacer_cases_vides_par_NA(df_observations$intellectual_rights)
#Pour la colonne license
remplacer_cases_vides_par_NA(df_observations$license)
#Pour la colonne owner
remplacer_cases_vides_par_NA(df_observations$owner)
#3. Créer le data frame pour taxonomie et faire les tests des colonnes
df_taxonomie <- read.csv("lepidopteres/taxonomie.csv") #Lire le fichier
verifier_nulle_NA_texte(df_taxonomie$observed_scientific_name) #Vérifier que la clé primaire a bel et bien une valeur non-nulle a chaque ligne et que c'est du texte
verifier_nulle_NA_texte(df_taxonomie$valid_scientific_name) #Vérifier que le nom scientifique valide n'est pas null ou pas du texte
verifier_nulle_NA_texte((df_taxonomie$rank)) #Vérifier que le rank n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$vernacular_fr) #Remplacer les cases vides de vernacular_fr par des NA
verifier_nulle_NA_texte((df_taxonomie$phylum)) #Vérifier que le phylum n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$class)) #Vérifier que la colonne class n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$order)) #Vérifier que la colonne order n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$family)) #Vérifier que la colonne family n'a pas de null ou de valeur qui ne sont pas du texte
verifier_nulle_NA_texte((df_taxonomie$genus)) #Vérifier que la colonne genus n'a pas de null ou de valeur qui ne sont pas du texte
remplacer_cases_vides_par_NA(df_taxonomie$species) #Remplacer les cases vides par des NA dans la colonne species
#4. Charger la base de donnée et les tables SQLite
base_de_donnees <- dbConnect(RSQLite::SQLite(), "base_observations.sqlite")
#Futures analyses ici
#Fermer la connexion après utilisation
dbDisconnect(base_de_donnees)
class(df_observations$observed_scientific_name)
class(df_observations$year_obs)
class(df_observations$day_obs)
class(df_observations$time_obs)
df_observations <- as.numeric(df_observations$year_obs)
class(df_observations$year_obs)
library(RSQLite)
# 1. Vérifier que toutes les colonnes ont les mêmes noms dans tous les fichiers d'observations, puis combiner tous les fichiers csv d'observations en un data frame pour faire les tests
# Liste des colonnes attendues
colonnes_attendues <- c("observed_scientific_name", "year_obs", "day_obs", "time_obs", "dwc_event_date", "obs_variable", "obs_unit", "obs_value", "lat", "lon", "original_source", "creator", "title", "publisher", "intellectual_rights", "license", "owner")
# Spécifier le sous-dossier contenant les fichiers CSV
csv_directory <- "lepidopteres"
# Liste de tous les fichiers CSV dans le sous-dossier
fichiers <- list.files(path = csv_directory, pattern = "\\.csv$", full.names = TRUE)
# Exclure taxonomie.csv de la liste des fichiers à vérifier, car ce ne sont pas des observations
fichier_exclu <- file.path(csv_directory, "taxonomie.csv")
fichiers_observations <- setdiff(fichiers, fichier_exclu)
# Vérifier les colonnes de chaque fichier
for (fichier in fichiers_observations) {
# Lire le fichier CSV
df_observations <- read.csv(fichier)
# Vérifier les noms de colonnes
colnames_df_observations <- colnames(df_observations)
# Comparer avec les colonnes attendues
if (!all(colnames_df_observations %in% colonnes_attendues) || length(colnames_df_observations) != length(colonnes_attendues)) {
# Arrêter l'exécution et afficher un message
stop(paste("Le fichier", fichier, "a des colonnes incorrectes. Exécution arrêtée.")) #Le fichier de 1883 a la colonne title écrite en français, à modifier si nouvelles données de lépidoptères sont utilisées
}
}
# Lire et combiner tous les fichiers CSV après avoir validé les colonnes
fichiers_liste <- lapply(fichiers_observations, read.csv)  # Lire chaque fichier CSV dans une liste
df_observations <- do.call(rbind, fichiers_liste)  # Combiner tous les data frames en un seul
#Obtenir les fonctions des script des fonctions
source("fonction_verification_colonnes.R")
source("verification_pattern.R")
source("fonction_verification_numerique_NA.R")
source("fonction_verification_NA.R")
#2. Effectuer les tests pour le data frame des observations combinées
#Pour la colonne observed_scientific_name
verifier_nulle_NA_texte(df_observations$observed_scientific_name)
#Pour la colonne year_obs
remplacer_non_numeriques_par_NA(df_observations$year_obs)
df_observations$year_obs <- as.numeric(df_observations$year_obs)
class(df_observations$year_obs)
df_observations$year_obs <- as.integer(df_observations$year_obs)
class(df_observations$year_obs)
df_observations$day_obs <- as.integer(df_observations$day_obs)
class(df_observations$time_obs)
df_observations$time_obs <- as.integer(df_observations$time_obs)
df_observations$time_obs <- as.character(df_observations$time_obs)
df_observations$obs_variable <- as.character(df_observations$obs_variable)
df_observations$obs_value <- as.integer(df_observations$obs_value)
df_observations$lat <- as.numeric(df_observations$lat)
df_observations$lon <- as.numeric(df_observations$lon)
df_observations$original_source <- as.character(df_observations$original_source)
df_observations$creator <- as.character(df_observations$creator)
df_observations$title <- as.character(df_observations$title)
df_observations$publisher <- as.character(df_observations$publisher)
df_observations$intellectual_rights <- as.character(df_observations$intellectual_rights)
df_observations$owner<- as.character(df_observations$owner)
library(RSQLite) #Charger la librarie
# Créer la connexion vers la base de données
ma_bdd <- dbConnect(RSQLite::SQLite(), "base_observations.sqlite")
# Créer la table de taxonomie
creer_taxonomie <- "
CREATE TABLE taxonomie (
observed_scientific_name TEXT PRIMARY KEY,
valid_scientific_name VARCHAR(100) NOT NULL,
rank VARCHAR(100) NOT NULL,
vernacular_fr VARCHAR(100),
kingdom VARCHAR(100) NOT NULL,
phylum VARCHAR(100) NOT NULL,
class VARCHAR(100) NOT NULL,
\"order\" VARCHAR(100) NOT NULL,  -- Il faut entourer le mot 'order'
family VARCHAR(100) NOT NULL,
genus VARCHAR(100) NOT NULL,
species VARCHAR(100)
);"
dbSendQuery(ma_bdd, creer_taxonomie)
